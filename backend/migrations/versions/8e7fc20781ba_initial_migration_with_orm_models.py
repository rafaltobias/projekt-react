"""Initial migration with ORM models

Revision ID: 8e7fc20781ba
Revises: 
Create Date: 2025-05-27 22:56:16.346858

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '8e7fc20781ba'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('sessions',
    sa.Column('id', sa.String(length=255), nullable=False),
    sa.Column('first_visit', sa.DateTime(), nullable=True),
    sa.Column('last_visit', sa.DateTime(), nullable=True),
    sa.Column('page_views', sa.Integer(), nullable=True),
    sa.Column('custom_events', sa.Integer(), nullable=True),
    sa.Column('entry_page', sa.String(length=500), nullable=True),
    sa.Column('exit_page', sa.String(length=500), nullable=True),
    sa.Column('duration_seconds', sa.Integer(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('country', sa.String(length=100), nullable=True),
    sa.Column('browser', sa.String(length=100), nullable=True),
    sa.Column('os', sa.String(length=100), nullable=True),
    sa.Column('device', sa.String(length=100), nullable=True),
    sa.Column('is_bounce', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('sessions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_sessions_first_visit'), ['first_visit'], unique=False)
        batch_op.create_index(batch_op.f('ix_sessions_last_visit'), ['last_visit'], unique=False)

    op.drop_table('gtm_tags')
    op.drop_table('gtm_triggers')
    op.drop_table('page_time_tracking')
    op.drop_table('gtm_variables')
    op.drop_table('tag_executions')
    op.drop_table('stats_view')
    op.drop_table('tag_triggers')
    op.drop_table('custom_tags')
    with op.batch_alter_table('tags', schema=None) as batch_op:
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=False)
        batch_op.alter_column('type',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               existing_nullable=True)
        batch_op.alter_column('trigger',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.alter_column('config',
               existing_type=sa.TEXT(),
               type_=sa.JSON(),
               existing_nullable=True,
               postgresql_using='config::json')
        batch_op.create_index(batch_op.f('ix_tags_name'), ['name'], unique=True)
        batch_op.drop_column('tag_content')
        batch_op.drop_column('trigger_condition')

    with op.batch_alter_table('tracking_events', schema=None) as batch_op:
        batch_op.alter_column('page_url',
               existing_type=sa.TEXT(),
               type_=sa.String(length=500),
               existing_nullable=False)
        batch_op.alter_column('ip_address',
               existing_type=postgresql.INET(),
               type_=sa.String(length=45),
               existing_nullable=True)
        batch_op.alter_column('referrer',
               existing_type=sa.TEXT(),
               type_=sa.String(length=500),
               existing_nullable=True)
        batch_op.alter_column('device',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=100),
               existing_nullable=True)
        batch_op.alter_column('event_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.alter_column('timestamp',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.drop_index('idx_tracking_browser')
        batch_op.drop_index('idx_tracking_country')
        batch_op.drop_index('idx_tracking_device')
        batch_op.drop_index('idx_tracking_event_name')
        batch_op.drop_index('idx_tracking_os')
        batch_op.drop_index('idx_tracking_page_url', postgresql_using='hash')
        batch_op.drop_index('idx_tracking_session_id')
        batch_op.drop_index('idx_tracking_timestamp')
        batch_op.create_index(batch_op.f('ix_tracking_events_ip_address'), ['ip_address'], unique=False)
        batch_op.create_index(batch_op.f('ix_tracking_events_page_url'), ['page_url'], unique=False)
        batch_op.create_index(batch_op.f('ix_tracking_events_session_id'), ['session_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_tracking_events_timestamp'), ['timestamp'], unique=False)

    with op.batch_alter_table('visits', schema=None) as batch_op:
        batch_op.alter_column('page_url',
               existing_type=sa.TEXT(),
               type_=sa.String(length=500),
               nullable=False)
        batch_op.alter_column('ip_address',
               existing_type=sa.TEXT(),
               type_=sa.String(length=45),
               existing_nullable=True)
        batch_op.alter_column('referrer',
               existing_type=sa.TEXT(),
               type_=sa.String(length=500),
               existing_nullable=True)
        batch_op.alter_column('browser',
               existing_type=sa.TEXT(),
               type_=sa.String(length=100),
               existing_nullable=True)
        batch_op.alter_column('os',
               existing_type=sa.TEXT(),
               type_=sa.String(length=100),
               existing_nullable=True)
        batch_op.alter_column('device',
               existing_type=sa.TEXT(),
               type_=sa.String(length=100),
               existing_nullable=True)
        batch_op.alter_column('country',
               existing_type=sa.TEXT(),
               type_=sa.String(length=100),
               existing_nullable=True)
        batch_op.alter_column('session_id',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.alter_column('event_name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.alter_column('event_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
        batch_op.alter_column('timestamp',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.create_index(batch_op.f('ix_visits_ip_address'), ['ip_address'], unique=False)
        batch_op.create_index(batch_op.f('ix_visits_page_url'), ['page_url'], unique=False)
        batch_op.create_index(batch_op.f('ix_visits_session_id'), ['session_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_visits_timestamp'), ['timestamp'], unique=False)
        batch_op.drop_column('tags')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('visits', schema=None) as batch_op:
        batch_op.add_column(sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
        batch_op.drop_index(batch_op.f('ix_visits_timestamp'))
        batch_op.drop_index(batch_op.f('ix_visits_session_id'))
        batch_op.drop_index(batch_op.f('ix_visits_page_url'))
        batch_op.drop_index(batch_op.f('ix_visits_ip_address'))
        batch_op.alter_column('timestamp',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('event_data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
        batch_op.alter_column('event_name',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('session_id',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('country',
               existing_type=sa.String(length=100),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('device',
               existing_type=sa.String(length=100),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('os',
               existing_type=sa.String(length=100),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('browser',
               existing_type=sa.String(length=100),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('referrer',
               existing_type=sa.String(length=500),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('ip_address',
               existing_type=sa.String(length=45),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('page_url',
               existing_type=sa.String(length=500),
               type_=sa.TEXT(),
               nullable=True)

    with op.batch_alter_table('tracking_events', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_tracking_events_timestamp'))
        batch_op.drop_index(batch_op.f('ix_tracking_events_session_id'))
        batch_op.drop_index(batch_op.f('ix_tracking_events_page_url'))
        batch_op.drop_index(batch_op.f('ix_tracking_events_ip_address'))
        batch_op.create_index('idx_tracking_timestamp', ['timestamp'], unique=False)
        batch_op.create_index('idx_tracking_session_id', ['session_id'], unique=False)
        batch_op.create_index('idx_tracking_page_url', ['page_url'], unique=False, postgresql_using='hash')
        batch_op.create_index('idx_tracking_os', ['os'], unique=False)
        batch_op.create_index('idx_tracking_event_name', ['event_name'], unique=False)
        batch_op.create_index('idx_tracking_device', ['device'], unique=False)
        batch_op.create_index('idx_tracking_country', ['country'], unique=False)
        batch_op.create_index('idx_tracking_browser', ['browser'], unique=False)
        batch_op.alter_column('timestamp',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('event_data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
        batch_op.alter_column('device',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
        batch_op.alter_column('referrer',
               existing_type=sa.String(length=500),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('ip_address',
               existing_type=sa.String(length=45),
               type_=postgresql.INET(),
               existing_nullable=True)
        batch_op.alter_column('page_url',
               existing_type=sa.String(length=500),
               type_=sa.TEXT(),
               existing_nullable=False)

    with op.batch_alter_table('tags', schema=None) as batch_op:
        batch_op.add_column(sa.Column('trigger_condition', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('tag_content', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.drop_index(batch_op.f('ix_tags_name'))
        batch_op.alter_column('config',
               existing_type=sa.JSON(),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('trigger',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('type',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('name',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)

    op.create_table('custom_tags',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('tag_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('tag_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('element_selector', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='custom_tags_pkey')
    )
    op.create_table('tag_triggers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('tag_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('page_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('trigger_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], name='tag_triggers_tag_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='tag_triggers_pkey')
    )
    op.create_table('stats_view',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('page_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('visit_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('unique_visitors', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='stats_view_pkey')
    )
    op.create_table('tag_executions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('tag_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('visit_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('executed_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('success', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], name='tag_executions_tag_id_fkey'),
    sa.ForeignKeyConstraint(['visit_id'], ['visits.id'], name='tag_executions_visit_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='tag_executions_pkey')
    )
    op.create_table('gtm_variables',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='gtm_variables_pkey')
    )
    op.create_table('page_time_tracking',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('page_url', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('session_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('total_seconds', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='page_time_tracking_pkey')
    )
    op.create_table('gtm_triggers',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('condition', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='gtm_triggers_pkey')
    )
    op.create_table('gtm_tags',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='gtm_tags_pkey')
    )
    with op.batch_alter_table('sessions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_sessions_last_visit'))
        batch_op.drop_index(batch_op.f('ix_sessions_first_visit'))

    op.drop_table('sessions')
    # ### end Alembic commands ###
